# component.py

##Class definition for the Component class
# Base class for all components. Components are the basic building blocks of an electrical circuit.
# Components are connected to junctions and have a value for voltage change across them, a current 
# value through them, and a power value associated with them. Components can be of different types 
# such as resistors, capacitors, inductors, etc.

## FIRST PRINCIPLES
# Power Law: P = IV: Power = Current * Voltage. This is the fundamental relationship between power,
# current, and voltage in an electrical circuit. It is used to calculate the power dissipated or
# generated by a component given the current and voltage, the current through a component given the
# power and voltage, and the voltage across a component given the power and current.

# 

# All components have the following attributes:
# - component_id: A unique identifier for the component (provided to the constructor)
# - junctions: a list of connected junctions (provided to the constructor) (at least 2)
# - voltage: a voltage change across the component, which direction is specified by the sign
#       as is determined by the numerical order of the junctions in the list. For example,
#       if the junctions are [1, 2], a positive voltage indicates that the voltage at junction 1
#       is higher than the voltage at junction 2. (zero by default)
# - current: a current value across the component, which direction is specified by the sign
#       as is determined by the numerical order of the junctions in the list.  For example,
#       if the junctions are [1, 2], a positive current indicates that the current is flowing
#       from junction 1 to junction 2. (zero by default)
# - a component type (conductor, resistor, voltage source, current source, etc.) (provided to the constructor)
# - a power value associated with the component (zero by default), which is calculated elsewhere in the 
#   program. The sign of the power indicates the direction of energy flow (into or out of the circuit).
#   A positive power value indicates that energy is leaving the circuit through the component (eg. a resistor), 
#   while a negative power value indicates that energy is entering the circuit (eg. a voltage source).

#

# All components have the following methods:
# - get_id(): Returns the ID of the component
# - get_junctions(): Returns the list of connected junctions
# - get_type(): Returns the type of the component
# - get_voltage(): Returns the voltage across the component
# - get_current(): Returns the current through the component
# - get_power(): Returns the power associated with the component
# - set_voltage(voltage): Sets the voltage across the component
# - set_current(current): Sets the current through the component
# - set_power(power): Sets the power associated with the component
# - add_junction(junction): Adds a junction to the list of connected junctions
# - remove_junction(junction): Removes a junction from the list of connected junctions
# - validate(): Validates the component's voltage, current, power, and junctions
#   and returns a list of validation errors







class Component:
    def __init__(self, component_id, junctions, component_type):
        self.component_id = component_id
        self.junctions = junctions
        self.voltage = 0
        self.current = 0
        self.power = 0
        self.component_type = component_type

        # Initiate an instance of the Component class of the component_type



    def get_id(self):
        return self.component_id    
    
    def get_junctions(self):
        return self.junctions
        
    def get_type(self):
        return self.component_type
    
    def get_voltage(self):
        return self.voltage
    
    def get_current(self):
        return self.current

    def get_power(self):
        return self.power
    
    def set_voltage(self, voltage):
        self.voltage = voltage
        return self.voltage
    
    def set_current(self, current):
        self.current = current
        return self.current
    
    def set_power(self, power):
        self.power = power
        return self.power

    def add_junction(self, junction):
        self.junctions.append(junction)
    
    def remove_junction(self, junction):
        if junction in self.junctions:
            self.junctions.remove(junction)

    def validate(self):
        errors = []
        if len(self.junctions) < 2:
            errors.append("Component must be connected to at least 2 junctions")
        if self.power != self.current * self.voltage:
            errors.append("Power must be equal to the product of current and voltage")
        return errors

    def __str__(self):
        return (
            f"Component {self.component_id}: "
            f"Type: {self.component_type}, "
            f"Voltage: {self.voltage}, "
            f"Current: {self.current}, "
            f"Power: {self.power}"
        )